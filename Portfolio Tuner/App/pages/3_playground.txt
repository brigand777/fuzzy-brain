import streamlit as st
import pandas as pd
from utils.simulation import run_monte_carlo
from components.portfolio_input import edit_portfolio
from utils.plots import plot_cumulative_returns, plot_fan_chart

st.set_page_config(page_title="Playground", layout="wide")
st.title("ðŸŽ® Portfolio Playground")
st.markdown("""
    Adjust your dream crypto portfolio and see how it might perform!
    This playground is designed for fast exploration, fun visuals, and intuitive feedback.
""")

# --- Load Data ---
@st.cache_data
def load_data():
    return pd.read_parquet("Portfolio Tuner/App/data/prices.parquet")

data = load_data()
available_assets = data.columns[:6].tolist()  # Limit to 5-6 assets for simplicity

st.markdown("### ðŸ§± Build Your Portfolio")
st.write("Use the sliders below to create a hypothetical portfolio.")

weights = {}
total_weight = 0
for asset in available_assets:
    weight = st.slider(f"{asset} Allocation (%)", 0, 100, 20, step=5)
    weights[asset] = weight / 100
    total_weight += weights[asset]

# Normalize if total != 1
if total_weight > 0:
    weights = {k: v / total_weight for k, v in weights.items()}
else:
    st.warning("Please allocate at least one asset.")
    st.stop()

st.markdown("---")
st.subheader("ðŸ“ˆ Simulated Historical Performance")

# Slice price data and create mock portfolio
mock_df = data[available_assets]
returns = mock_df.pct_change().dropna()

# Cumulative returns
portfolio_returns = returns.dot(pd.Series(weights))
cumulative_returns = (1 + portfolio_returns).cumprod()
fig = plot_cumulative_returns(cumulative_returns)
st.plotly_chart(fig, use_container_width=True)

st.markdown("---")
st.subheader("ðŸ”® Monte Carlo Future Simulation")
st.write("Simulate potential futures based on historical volatility and correlations.")

if st.button("Run Simulation ðŸš€"):
    fan_fig, mc_summary = run_monte_carlo(weights, data[available_assets], horizon_days=365, n_sims=200)
    st.plotly_chart(fan_fig, use_container_width=True)

    st.success("Simulation Summary:")
    st.write(mc_summary)
else:
    st.info("Click the button above to generate a forecast of your portfolio's future.")